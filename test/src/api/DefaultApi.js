/**
 * naranja-customer-api-testing
 * sarasa
 *
 * The version of the OpenAPI document: 3.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Bodycustomerupdate', 'model/Cbuentity', 'model/Customer', 'model/Deletecbu409', 'model/Errorresponse400', 'model/Errorresponse401', 'model/Errorresponse500', 'model/Getcbu200', 'model/Getcbu409', 'model/GetfilterrealId409', 'model/Inlineresponse200', 'model/Inlineresponse2001', 'model/Inlineresponse2002', 'model/Inlineresponse2003', 'model/Inlineresponse2004', 'model/Inlineresponse2005', 'model/Inlineresponse2006', 'model/Inlineresponse2007', 'model/Inlineresponse2008', 'model/Inputaddress', 'model/Inputaddresses', 'model/Inputcontactdetails', 'model/Inputemail', 'model/Inputemailcategory', 'model/Inputphone', 'model/Postcbu409', 'model/Postcbuvalidate', 'model/Postcbuvalidate200', 'model/Postcbuvalidate409', 'model/Propensitynotfound409', 'model/Putcustomerupdate403', 'model/Putcustomerupdate409', 'model/Servicenotavailable503'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Bodycustomerupdate'), require('../model/Cbuentity'), require('../model/Customer'), require('../model/Deletecbu409'), require('../model/Errorresponse400'), require('../model/Errorresponse401'), require('../model/Errorresponse500'), require('../model/Getcbu200'), require('../model/Getcbu409'), require('../model/GetfilterrealId409'), require('../model/Inlineresponse200'), require('../model/Inlineresponse2001'), require('../model/Inlineresponse2002'), require('../model/Inlineresponse2003'), require('../model/Inlineresponse2004'), require('../model/Inlineresponse2005'), require('../model/Inlineresponse2006'), require('../model/Inlineresponse2007'), require('../model/Inlineresponse2008'), require('../model/Inputaddress'), require('../model/Inputaddresses'), require('../model/Inputcontactdetails'), require('../model/Inputemail'), require('../model/Inputemailcategory'), require('../model/Inputphone'), require('../model/Postcbu409'), require('../model/Postcbuvalidate'), require('../model/Postcbuvalidate200'), require('../model/Postcbuvalidate409'), require('../model/Propensitynotfound409'), require('../model/Putcustomerupdate403'), require('../model/Putcustomerupdate409'), require('../model/Servicenotavailable503'));
  } else {
    // Browser globals (root is window)
    if (!root.NaranjaCustomerApiTesting) {
      root.NaranjaCustomerApiTesting = {};
    }
    root.NaranjaCustomerApiTesting.DefaultApi = factory(root.NaranjaCustomerApiTesting.ApiClient, root.NaranjaCustomerApiTesting.Bodycustomerupdate, root.NaranjaCustomerApiTesting.Cbuentity, root.NaranjaCustomerApiTesting.Customer, root.NaranjaCustomerApiTesting.Deletecbu409, root.NaranjaCustomerApiTesting.Errorresponse400, root.NaranjaCustomerApiTesting.Errorresponse401, root.NaranjaCustomerApiTesting.Errorresponse500, root.NaranjaCustomerApiTesting.Getcbu200, root.NaranjaCustomerApiTesting.Getcbu409, root.NaranjaCustomerApiTesting.GetfilterrealId409, root.NaranjaCustomerApiTesting.Inlineresponse200, root.NaranjaCustomerApiTesting.Inlineresponse2001, root.NaranjaCustomerApiTesting.Inlineresponse2002, root.NaranjaCustomerApiTesting.Inlineresponse2003, root.NaranjaCustomerApiTesting.Inlineresponse2004, root.NaranjaCustomerApiTesting.Inlineresponse2005, root.NaranjaCustomerApiTesting.Inlineresponse2006, root.NaranjaCustomerApiTesting.Inlineresponse2007, root.NaranjaCustomerApiTesting.Inlineresponse2008, root.NaranjaCustomerApiTesting.Inputaddress, root.NaranjaCustomerApiTesting.Inputaddresses, root.NaranjaCustomerApiTesting.Inputcontactdetails, root.NaranjaCustomerApiTesting.Inputemail, root.NaranjaCustomerApiTesting.Inputemailcategory, root.NaranjaCustomerApiTesting.Inputphone, root.NaranjaCustomerApiTesting.Postcbu409, root.NaranjaCustomerApiTesting.Postcbuvalidate, root.NaranjaCustomerApiTesting.Postcbuvalidate200, root.NaranjaCustomerApiTesting.Postcbuvalidate409, root.NaranjaCustomerApiTesting.Propensitynotfound409, root.NaranjaCustomerApiTesting.Putcustomerupdate403, root.NaranjaCustomerApiTesting.Putcustomerupdate409, root.NaranjaCustomerApiTesting.Servicenotavailable503);
  }
}(this, function(ApiClient, Bodycustomerupdate, Cbuentity, Customer, Deletecbu409, Errorresponse400, Errorresponse401, Errorresponse500, Getcbu200, Getcbu409, GetfilterrealId409, Inlineresponse200, Inlineresponse2001, Inlineresponse2002, Inlineresponse2003, Inlineresponse2004, Inlineresponse2005, Inlineresponse2006, Inlineresponse2007, Inlineresponse2008, Inputaddress, Inputaddresses, Inputcontactdetails, Inputemail, Inputemailcategory, Inputphone, Postcbu409, Postcbuvalidate, Postcbuvalidate200, Postcbuvalidate409, Propensitynotfound409, Putcustomerupdate403, Putcustomerupdate409, Servicenotavailable503) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 3.2.1
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.apiHealthLivenessGetWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/api/health/liveness', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.apiHealthLivenessGet = function() {
      return this.apiHealthLivenessGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.apiHealthReadinessGetWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/api/health/readiness', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.apiHealthReadinessGet = function() {
      return this.apiHealthReadinessGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} customerId 
     * @param {String} cbuId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCustomerCbuWithHttpInfo = function(customerId, cbuId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomerCbu");
      }
      // verify the required parameter 'cbuId' is set
      if (cbuId === undefined || cbuId === null) {
        throw new Error("Missing the required parameter 'cbuId' when calling deleteCustomerCbu");
      }

      var pathParams = {
        'customer_id': customerId,
        'cbu_id': cbuId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}/cbus/{cbu_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} customerId 
     * @param {String} cbuId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCustomerCbu = function(customerId, cbuId) {
      return this.deleteCustomerCbuWithHttpInfo(customerId, cbuId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.getCustomerWithHttpInfo = function(customerId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomer");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Customer;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.getCustomer = function(customerId) {
      return this.getCustomerWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Inlineresponse2002} and HTTP response
     */
    this.getCustomerAccountWithHttpInfo = function(customerId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerAccount");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Inlineresponse2002;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}/account', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Inlineresponse2002}
     */
    this.getCustomerAccount = function(customerId) {
      return this.getCustomerAccountWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Inlineresponse2003} and HTTP response
     */
    this.getCustomerAddressesWithHttpInfo = function(customerId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerAddresses");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Inlineresponse2003;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}/contact_details/addresses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Inlineresponse2003}
     */
    this.getCustomerAddresses = function(customerId) {
      return this.getCustomerAddressesWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Getcbu200} and HTTP response
     */
    this.getCustomerCbuWithHttpInfo = function(customerId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerCbu");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Getcbu200;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}/cbus', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Getcbu200}
     */
    this.getCustomerCbu = function(customerId) {
      return this.getCustomerCbuWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Inlineresponse2006} and HTTP response
     */
    this.getCustomerContactDetailsWithHttpInfo = function(customerId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerContactDetails");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Inlineresponse2006;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}/contact_details', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Inlineresponse2006}
     */
    this.getCustomerContactDetails = function(customerId) {
      return this.getCustomerContactDetailsWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Inlineresponse2007} and HTTP response
     */
    this.getCustomerEmailWithHttpInfo = function(customerId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerEmail");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Inlineresponse2007;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}/contact_details/emails', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Inlineresponse2007}
     */
    this.getCustomerEmail = function(customerId) {
      return this.getCustomerEmailWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Inlineresponse2001} and HTTP response
     */
    this.getCustomerProductsWithHttpInfo = function(customerId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerProducts");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Inlineresponse2001;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}/products', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Inlineresponse2001}
     */
    this.getCustomerProducts = function(customerId) {
      return this.getCustomerProductsWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Inlineresponse200} and HTTP response
     */
    this.getCustomerPropensityWithHttpInfo = function(customerId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerPropensity");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Inlineresponse200;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}/propensity', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Inlineresponse200}
     */
    this.getCustomerPropensity = function(customerId) {
      return this.getCustomerPropensityWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Inlineresponse2005} and HTTP response
     */
    this.getFilterWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFilter");
      }

      var pathParams = {
      };
      var queryParams = {
        'id': id,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Inlineresponse2005;
      return this.apiClient.callApi(
        '/api/customers/filter', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Inlineresponse2005}
     */
    this.getFilter = function(id) {
      return this.getFilterWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} customerId 
     * @param {module:model/Cbuentity} cbuentity 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.postCustomerCbuWithHttpInfo = function(customerId, cbuentity) {
      var postBody = cbuentity;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomerCbu");
      }
      // verify the required parameter 'cbuentity' is set
      if (cbuentity === undefined || cbuentity === null) {
        throw new Error("Missing the required parameter 'cbuentity' when calling postCustomerCbu");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}/cbus', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} customerId 
     * @param {module:model/Cbuentity} cbuentity 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.postCustomerCbu = function(customerId, cbuentity) {
      return this.postCustomerCbuWithHttpInfo(customerId, cbuentity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/Postcbuvalidate} postcbuvalidate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Postcbuvalidate200} and HTTP response
     */
    this.postValidateCbuWithHttpInfo = function(postcbuvalidate) {
      var postBody = postcbuvalidate;
      // verify the required parameter 'postcbuvalidate' is set
      if (postcbuvalidate === undefined || postcbuvalidate === null) {
        throw new Error("Missing the required parameter 'postcbuvalidate' when calling postValidateCbu");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Postcbuvalidate200;
      return this.apiClient.callApi(
        '/api/customers/cbu/validate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/Postcbuvalidate} postcbuvalidate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Postcbuvalidate200}
     */
    this.postValidateCbu = function(postcbuvalidate) {
      return this.postValidateCbuWithHttpInfo(postcbuvalidate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} customerId 
     * @param {module:model/Bodycustomerupdate} bodycustomerupdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putCustomerWithHttpInfo = function(customerId, bodycustomerupdate) {
      var postBody = bodycustomerupdate;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling putCustomer");
      }
      // verify the required parameter 'bodycustomerupdate' is set
      if (bodycustomerupdate === undefined || bodycustomerupdate === null) {
        throw new Error("Missing the required parameter 'bodycustomerupdate' when calling putCustomer");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} customerId 
     * @param {module:model/Bodycustomerupdate} bodycustomerupdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putCustomer = function(customerId, bodycustomerupdate) {
      return this.putCustomerWithHttpInfo(customerId, bodycustomerupdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} customerId 
     * @param {module:model/Inputaddresses} inputaddresses 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Inlineresponse2004} and HTTP response
     */
    this.putCustomerAddressesWithHttpInfo = function(customerId, inputaddresses) {
      var postBody = inputaddresses;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling putCustomerAddresses");
      }
      // verify the required parameter 'inputaddresses' is set
      if (inputaddresses === undefined || inputaddresses === null) {
        throw new Error("Missing the required parameter 'inputaddresses' when calling putCustomerAddresses");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Inlineresponse2004;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}/contact_details/addresses', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} customerId 
     * @param {module:model/Inputaddresses} inputaddresses 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Inlineresponse2004}
     */
    this.putCustomerAddresses = function(customerId, inputaddresses) {
      return this.putCustomerAddressesWithHttpInfo(customerId, inputaddresses)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} categoryId 
     * @param {String} customerId 
     * @param {module:model/Inputaddress} inputaddress 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Inlineresponse2004} and HTTP response
     */
    this.putCustomerAdressesWithHttpInfo = function(categoryId, customerId, inputaddress, opts) {
      opts = opts || {};
      var postBody = inputaddress;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling putCustomerAdresses");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling putCustomerAdresses");
      }
      // verify the required parameter 'inputaddress' is set
      if (inputaddress === undefined || inputaddress === null) {
        throw new Error("Missing the required parameter 'inputaddress' when calling putCustomerAdresses");
      }

      var pathParams = {
        'category_id': categoryId,
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept': opts['accept']
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Inlineresponse2004;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}/contact_details/addresses/{category_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} categoryId 
     * @param {String} customerId 
     * @param {module:model/Inputaddress} inputaddress 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Inlineresponse2004}
     */
    this.putCustomerAdresses = function(categoryId, customerId, inputaddress, opts) {
      return this.putCustomerAdressesWithHttpInfo(categoryId, customerId, inputaddress, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} customerId 
     * @param {module:model/Inputcontactdetails} inputcontactdetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Inlineresponse2004} and HTTP response
     */
    this.putCustomerContactDetailsWithHttpInfo = function(customerId, inputcontactdetails) {
      var postBody = inputcontactdetails;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling putCustomerContactDetails");
      }
      // verify the required parameter 'inputcontactdetails' is set
      if (inputcontactdetails === undefined || inputcontactdetails === null) {
        throw new Error("Missing the required parameter 'inputcontactdetails' when calling putCustomerContactDetails");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Inlineresponse2004;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}/contact_details', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} customerId 
     * @param {module:model/Inputcontactdetails} inputcontactdetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Inlineresponse2004}
     */
    this.putCustomerContactDetails = function(customerId, inputcontactdetails) {
      return this.putCustomerContactDetailsWithHttpInfo(customerId, inputcontactdetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} customerId 
     * @param {module:model/Inputemail} inputemail 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Inlineresponse2004} and HTTP response
     */
    this.putCustomerEmailWithHttpInfo = function(customerId, inputemail, opts) {
      opts = opts || {};
      var postBody = inputemail;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling putCustomerEmail");
      }
      // verify the required parameter 'inputemail' is set
      if (inputemail === undefined || inputemail === null) {
        throw new Error("Missing the required parameter 'inputemail' when calling putCustomerEmail");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept': opts['accept']
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Inlineresponse2004;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}/contact_details/emails', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} customerId 
     * @param {module:model/Inputemail} inputemail 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Inlineresponse2004}
     */
    this.putCustomerEmail = function(customerId, inputemail, opts) {
      return this.putCustomerEmailWithHttpInfo(customerId, inputemail, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} categoryId 
     * @param {String} customerId 
     * @param {module:model/Inputemailcategory} inputemailcategory 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Inlineresponse2008} and HTTP response
     */
    this.putCustomerEmailsWithHttpInfo = function(categoryId, customerId, inputemailcategory, opts) {
      opts = opts || {};
      var postBody = inputemailcategory;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling putCustomerEmails");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling putCustomerEmails");
      }
      // verify the required parameter 'inputemailcategory' is set
      if (inputemailcategory === undefined || inputemailcategory === null) {
        throw new Error("Missing the required parameter 'inputemailcategory' when calling putCustomerEmails");
      }

      var pathParams = {
        'category_id': categoryId,
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept': opts['accept']
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Inlineresponse2008;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}/contact_details/emails/{category_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} categoryId 
     * @param {String} customerId 
     * @param {module:model/Inputemailcategory} inputemailcategory 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Inlineresponse2008}
     */
    this.putCustomerEmails = function(categoryId, customerId, inputemailcategory, opts) {
      return this.putCustomerEmailsWithHttpInfo(categoryId, customerId, inputemailcategory, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} categoryId 
     * @param {String} customerId 
     * @param {String} phoneTypeId 
     * @param {module:model/Inputphone} inputphone 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Inlineresponse2008} and HTTP response
     */
    this.putCustomerPhoneWithHttpInfo = function(categoryId, customerId, phoneTypeId, inputphone, opts) {
      opts = opts || {};
      var postBody = inputphone;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling putCustomerPhone");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling putCustomerPhone");
      }
      // verify the required parameter 'phoneTypeId' is set
      if (phoneTypeId === undefined || phoneTypeId === null) {
        throw new Error("Missing the required parameter 'phoneTypeId' when calling putCustomerPhone");
      }
      // verify the required parameter 'inputphone' is set
      if (inputphone === undefined || inputphone === null) {
        throw new Error("Missing the required parameter 'inputphone' when calling putCustomerPhone");
      }

      var pathParams = {
        'category_id': categoryId,
        'customer_id': customerId,
        'phone_type_id': phoneTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept': opts['accept']
      };
      var formParams = {
      };

      var authNames = ['naranjaAuthorizer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Inlineresponse2008;
      return this.apiClient.callApi(
        '/api/customers/{customer_id}/contact_details/phones/{phone_type_id}/{category_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} categoryId 
     * @param {String} customerId 
     * @param {String} phoneTypeId 
     * @param {module:model/Inputphone} inputphone 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Inlineresponse2008}
     */
    this.putCustomerPhone = function(categoryId, customerId, phoneTypeId, inputphone, opts) {
      return this.putCustomerPhoneWithHttpInfo(categoryId, customerId, phoneTypeId, inputphone, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.versionGetWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/version', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.versionGet = function() {
      return this.versionGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
